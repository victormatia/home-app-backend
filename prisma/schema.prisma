// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  name      String?
  email     String    @unique
  password  String?
  cpf       String?   @unique
  birthDate DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  owner  Immobile[] @relation("owner") // relacionamento de 1:N com Immobile
  tenant Immobile[] @relation("tenant") // relacionamento de 1:N com Immobile

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  street     String
  burgh      String
  city       String
  state      String
  postalCode String
  number     String
  apto       String?
  complement String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  immobile Immobile? // relacionamento não obrigatório 1:1 com Immobile

  @@map("addresses")
}

model ImmobileType {
  id   String @id @default(uuid())
  type String

  Immobile Immobile[] // relacionamento de 1:N com Immobile

  @@map("immobile_types")
}

model Immobile {
  id           String   @id @default(uuid())
  ownerId      String
  tenantId     String?
  addressId    String   @unique
  typeId       String
  price        Decimal  @db.Decimal(6, 2)
  bedroomsQty  Int      @default(1)
  bathroomsQty Int      @default(1)
  parkingQty   Int      @default(0)
  sqrFootage   Decimal  @db.Decimal(7, 2) // ex: 10000,20
  petFriendly  Boolean  @default(false)
  description  String   @db.VarChar(250) // validar se é tamanho suficiente para uma descrição
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  owner   User            @relation("owner", fields: [ownerId], references: [id])
  tenant  User?           @relation("tenant", fields: [tenantId], references: [id])
  address Address         @relation(fields: [addressId], references: [id])
  type    ImmobileType    @relation(fields: [typeId], references: [id])
  photos  ImmobilePhoto[]

  @@map("immobiles")
}

model Photo {
  id             String          @id @default(uuid())
  url            String
  immobilePhotos ImmobilePhoto[]

  @@map("photos")
}

model ImmobilePhoto {
  immobileId String
  photoId    String

  immobile Immobile @relation(fields: [immobileId], references: [id])
  photo    Photo    @relation(fields: [photoId], references: [id])

  @@id([immobileId, photoId])
  @@map("immobile_photos")
}
